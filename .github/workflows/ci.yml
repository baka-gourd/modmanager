name: CI

on:
  push:
    paths:
      - "*.pro"
      - "src/**"
      - ".github/workflows/ci.yml"
  pull_request:
    paths:
      - "*.pro"
      - "src/**"
      - ".github/workflows/ci.yml"
jobs:
  build-on-ubuntu:
    name: Build On Ubuntu
    runs-on: ubuntu-latest
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: 5.15.2
          cached: "false"
          modules: qtwebengine
      - name: ubuntu install GL library
        run: sudo apt-get install -y libglew-dev libglfw3-dev
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: Set Env
        run: |
          export VERSION=$(grep -o '".*"' src/version.h | sed 's/"//g')
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
      - name: build ubuntu
        run: |
          qmake
          make
      - name: package dependencies
        run: |
          sudo apt update
          sudo apt install -y libgl-dev libx11-dev libxkbcommon-x11-dev libxcb-image0-dev libxcb-icccm4-dev libssl-dev libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0
          sudo apt install -y libprotobuf-dev protobuf-compiler protobuf-c-compiler libgrpc++-dev protobuf-compiler-grpc ninja-build fcitx-frontend-qt5 libcurl4-openssl-dev
        #run: |
        #make INSTALL_ROOT=appdir -j2 install ; find appdir/
        #wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        #chmod a+x linuxdeployqt-continuous-x86_64.AppImage
        #./linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage -verbose=2 -unsupported-allow-new-glibc
      #- name: package
      #- uses: actions/upload-artifact@v2
      #with:
      #name: ${{github.event.repository.name}}-${VERSION}-${{ matrix.qt_arch }}.AppImage
      #file: ${{github.event.repository.name}}-${VERSION}-x86_64.AppImage

  build-on-win-mingw:
    name: Build On Windows Mingw
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win32_mingw81
            qt_ver: 5.15.2
            qt_tools: "tools_mingw,8.1.0-1-202004170606,qt.tools.win32_mingw810"
            qt_tools_mingw_install: mingw810_32
            openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win32.zip"
          - qt_arch: win64_mingw81
            qt_ver: 5.15.2
            qt_tools: "tools_mingw,8.1.0-1-202004170606,qt.tools.win64_mingw810"
            qt_tools_mingw_install: mingw810_64
            openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win64.zip"
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          cached: "false"
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Qt 5 environment configuration
        if: ${{ startsWith( matrix.qt_ver, 5 ) }}
        shell: pwsh
        run: |
          Write-Output "${{ env.Qt5_DIR }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          Write-Output "${{ env.Qt5_DIR }}/../../Tools/${{ matrix.qt_tools_mingw_install }}/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      - name: where is qmake & where is mingw32-make
        shell: pwsh
        run: |
          Get-Command -Name 'qmake' | Format-List
          Get-Command -Name 'mingw32-make' | Format-List
      - name: mingw-build
        id: build
        shell: cmd
        run: |
          qmake
          mingw32-make.exe qmake_all
          mingw32-make.exe
      - name: package
        id: package
        shell: pwsh
        run: |
          mkdir deploy && mv release/${{github.event.repository.name}}.exe deploy
          $client = new-object System.Net.WebClient
          $client.DownloadFile('${{ matrix.openssl_url }}', 'openssl-bin.zip')
          Expand-Archive -Path openssl-bin.zip -DestinationPath openssl
          cp openssl/*.dll deploy/
          cp LICENSE* deploy/
          cp *md deploy/
          windeployqt.exe --no-translations --no-opengl-sw --no-system-d3d-compiler --no-angle --no-quick-import --qmldir "${{ env.Qt5_DIR }}/qml" deploy/${{github.event.repository.name}}.exe
      - uses: actions/upload-artifact@v2
        with:
          name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}
          path: ${{github.workspace}}/deploy/

      - name: Create zip
        id: createzip
        shell: pwsh
        run: |
          Compress-Archive -LiteralPath ${{github.workspace}}/deploy -DestinationPath ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          asset_name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          tag: ${{ github.ref }}
          overwrite: true

  build-on-win-msvc:
    name: Build On Windows MSVC
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          #- qt_ver: 5.15.2
          #qt_arch: win32_msvc2019
          #msvc_arch: x86
          #qt_arch_install: msvc2019
          #openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win32.zip"
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
            openssl_url: "https://github.com/kaniol-lck/openssl1.1.1-prebuilt/releases/download/1.1.1l/openssl-1.1.1l-win64.zip"
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2.13.0
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          tools: ${{ matrix.qt_tools }}
          cached: "false"
          modules: qtwebengine
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: recursive
      - name: Install zlib 32
        if: contains(matrix.qt_arch, 'win32_msvc')
        shell: pwsh
        run: |
          set ARCH=Win32
          Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat
          ./install_zlib.bat
          del install_zlib.bat
      - name: Install zlib
        if: contains(matrix.qt_arch, 'win64_msvc')
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://git.io/JnHTY -OutFile install_zlib.bat
          ./install_zlib.bat
          del install_zlib.bat
      - name: Test zlib
        shell: cmd
        run: |
          if NOT exist "%PROGRAMFILES%"\zlib\lib\zlib.lib exit 1
          if NOT exist "%PROGRAMFILES%"\zlib\bin\zlib.dll exit 1
          if NOT exist "%PROGRAMFILES%"\zlib\include\zconf.h exit 1
          if NOT exist "%PROGRAMFILES%"\zlib\include\zlib.h exit 1
          if NOT exist "%PROGRAMFILES%"\zlib\lib\zlib.lib exit 1
      - name: msvc-build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          qmake
          nmake
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      - name: perpare package
        shell: pwsh
        run: |
          mkdir deploy && mv release/${{github.event.repository.name}}.exe deploy
          $client = new-object System.Net.WebClient
          $client.DownloadFile('${{ matrix.openssl_url }}', 'openssl-bin.zip')
          Expand-Archive -Path openssl-bin.zip -DestinationPath openssl
          cp openssl/*.dll deploy/
          cp LICENSE* deploy/
          cp *md deploy/
      - name: copy zlib 32
        if: contains(matrix.qt_arch, 'win32_msvc')
        shell: pwsh
        run: |
          cp "C:/Program Files (x86)/zlib/bin/zlib.dll" deploy/
      - name: copy zlib
        if: contains(matrix.qt_arch, 'win64_msvc')
        shell: pwsh
        run: |
          cp "C:/Program Files/zlib/bin/zlib.dll" deploy/
      - name: package
        id: package
        shell: pwsh
        run: |
          windeployqt.exe --no-translations --no-opengl-sw --no-system-d3d-compiler --no-angle --no-quick-import --qmldir "${{ env.Qt5_DIR }}/qml" deploy/${{github.event.repository.name}}.exe
      - uses: actions/upload-artifact@v2
        with:
          name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}
          path: ${{github.workspace}}/deploy/

      - name: Create zip
        id: createzip
        shell: pwsh
        run: |
          Compress-Archive -LiteralPath ${{github.workspace}}/deploy -DestinationPath ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{github.workspace}}/${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          asset_name: ${{github.event.repository.name}}-${{ matrix.qt_arch }}.zip
          tag: ${{ github.ref }}
          overwrite: true
